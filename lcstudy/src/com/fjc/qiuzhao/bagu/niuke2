1. 事务如何开启？加在哪一层。
SpringBoot是默认开启事务的，在service层的类或者方法上添加@Transactional注解
设置事务隔离级别：
@Transactional(isolation = Isolation.READ_UNCOMMITTED)：读未提交
@Transactional(isolation = Isolation.READ_COMMITTED)：读已提交
@Transactional(isolation = Isolation.REPEATABLE_READ)：可重复读
@Transactional(isolation = Isolation.SERIALIZABLE)：串行化

设置回滚：
@Transactional(rollbackFor=Exception.class)，如果类加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚

Spring有两种方式开启事务: 声明式和编程式
声明式是使用Spring框架提供的方式，声明式也有两种: xml配置文件方式; 注解方式
编程式事务管理就是自己写代码逻辑, 用try catch 来实现出故障时回滚的操作

2. 说一说HashMap
JDK 1.7之前是数组+链表;
JDK 1.8之后是数组+链表/红黑树,链表上的元素超过8个并且长度>=64时自动转成红黑树，节点编程树节点。

HashMap的put方法的执行方法，添加一对key-value时，会先计算key的hash值，然后根据hash值确认在table中存储的位置。
如果该位置没有元素，直接插入。否则迭代该元素链表并依次比较其key的hash值。如果hash值相等且key值相等，用新的Entry的value
去覆盖原来节点的value。如果两个hash值相等且key值不等，在该节点插入该链表的链头。

hash运算的过程其实就是对目标元素的Key进行hashcode，再对Map的容量进行取模，
而JDK 的工程师为了提升取模的效率，使用位运算代替了取模运算，这就要求Map的容量一定得是2的幂。
而作为默认容量，太大和太小都不合适，所以16就作为一个比较合适的经验值被采用了。
为了保证任何情况下Map的容量都是2的幂，HashMap在两个地方都做了限制。
首先是，如果用户制定了初始容量，那么HashMap会计算出比该数大的第一个2的幂作为初始容量。
另外，在扩容的时候，也是进行成倍的扩容，即4变成8，8变成16。

